from collections import defaultdict
import sqlite3
import os



BASE_DIR = os.path.dirname(os.path.abspath(__file__))
db_path = os.path.join(BASE_DIR, 'sql', 'warehouse.db')


def get_db_connection():
    connection = sqlite3.connect(db_path, timeout=10)
    return connection

def cash_rest():
    try:
        connection = get_db_connection()
        cursor = connection.cursor()
        query = """
            SELECT SUM(B.balance * P.price) AS total_cash
            FROM Balances AS B
            JOIN ProductsGuide AS P ON B.article = P.article;
        """
        cursor.execute(query)
        result = cursor.fetchone()
        total_cash = result[0] if result[0] is not None else 0
        connection.close()
        return total_cash
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –æ–±—â–µ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞ –¥–µ–Ω–µ–≥:", e)
        return None

def rest_of_good(article):
    try:
        conn–µction = get_db_connection()
        cursor = conn–µction.cursor()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º LEFT JOIN, —á—Ç–æ–±—ã –¥–∞–∂–µ –µ—Å–ª–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø–∏—Å—å –≤ Balances, –≤–µ—Ä–Ω—É—Ç—å 0 –æ—Å—Ç–∞—Ç–æ–∫.
        query = """
            SELECT P.name, P.price, IFNULL(B.balance, 0) AS balance
            FROM ProductsGuide P
            LEFT JOIN Balances B ON P.article = B.article
            WHERE P.article = ?
        """
        cursor.execute(query, (article.strip(),))
        result = cursor.fetchone()
        conn–µction.close()

        if not result:
            return f"–¢–æ–≤–∞—Ä —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º '{article}' –Ω–µ –Ω–∞–π–¥–µ–Ω."

        product_name, price, balance = result

        if balance == 0:
            return f"–û—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–∞ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º '{article}' –Ω–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ."

        total_cost = price * balance
        return (
            f"–¢–æ–≤–∞—Ä: {product_name}\n"
            f"–ê—Ä—Ç–∏–∫—É–ª: {article}\n"
            f"–û—Å—Ç–∞—Ç–æ–∫: {balance} —à—Ç\n"
            f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost} —Ä—É–±"
        )

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}"


def rest_of_controllers():
    try:
        connection = get_db_connection()
        cursor = connection.cursor()

        # –í—ã–±–∏—Ä–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª, –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ –æ—Å—Ç–∞—Ç–æ–∫ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö "FS_ST"
        query = """
            SELECT article, product_name, balance
            FROM Balances
            WHERE article LIKE '%FS_ST%' COLLATE NOCASE
        """
        cursor.execute(query)
        rows = cursor.fetchall()
        connection.close()

        result_string = ""
        for row in rows:
            article, prod_name, total_balance = row
            if total_balance is None or total_balance == 0:
                continue
            result_string += f"üî∏ {article}: {prod_name} {int(total_balance)} —à—Ç—É–∫\n"

        if result_string == "":
            return "–ù–µ—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ"
        return result_string

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}"



def shipments(n):
    try:
        connection = get_db_connection()
        cursor = connection.cursor()

        if n == 0:
            days = 7
        elif n == 1:
            days = 30
        else:
            connection.close()
            return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–µ—Ä–∏–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 0 (7 –¥–Ω–µ–π) –∏–ª–∏ 1 (30 –¥–Ω–µ–π)."

        # SQL-–∑–∞–ø—Ä–æ—Å: –≤—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, —Å—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≥—Ä—É–∑–æ–∫ –∏ –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–≥—Ä—É–∑–æ–∫.
        query = f"""
            SELECT T.product_name, 
                   SUM(T.shipment) AS total_shipment, 
                   SUM(T.shipment * P.price) AS total_value
            FROM Transactions T
            JOIN ProductsGuide P ON T.article = P.article
            WHERE T.shipment > 0 
              AND datetime(T.date) >= datetime('now', '-{days} days')
            GROUP BY T.product_name
        """

        cursor.execute(query)
        rows = cursor.fetchall()
        connection.close()

        result_str = ""
        for row in rows:
            product_name, total_shipment, total_value = row
            # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≥—Ä—É–∑–æ–∫ —Ä–∞–≤–Ω–æ –Ω—É–ª—é –∏–ª–∏ None, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å
            if not total_shipment or total_shipment == 0:
                continue
            result_str += f"üî∏ {product_name} {int(total_shipment)} —à—Ç—É–∫ {int(total_value)} —Ä—É–±–ª–µ–π\n"

        if result_str == "":
            return "–ù–µ—Ç –æ—Ç–≥—Ä—É–∑–æ–∫ –∑–∞ –¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏"
        return result_str

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}"

def delivery(n):
    try:
        connection = get_db_connection()
        cursor = connection.cursor()

        if n == 0:
            days = 7
        elif n == 1:
            days = 30
        else:
            connection.close()
            return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–µ—Ä–∏–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 0 (7 –¥–Ω–µ–π) –∏–ª–∏ 1 (30 –¥–Ω–µ–π)."

        # SQL-–∑–∞–ø—Ä–æ—Å: –≤—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, —Å—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏ –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π.
        query = f"""
            SELECT T.product_name, 
                   SUM(T.receipt) AS total_receipt, 
                   SUM(T.receipt * P.price) AS total_value
            FROM Transactions T
            JOIN ProductsGuide P ON T.article = P.article
            WHERE T.receipt > 0 
              AND datetime(T.date) >= datetime('now', '-{days} days')
            GROUP BY T.product_name
        """
        cursor.execute(query)
        rows = cursor.fetchall()
        connection.close()

        result_str = ""
        for row in rows:
            product_name, total_receipt, total_value = row
            if not total_receipt or total_receipt == 0:
                continue
            result_str += f"üî∏ {product_name} {int(total_receipt)} —à—Ç—É–∫ {int(total_value)} —Ä—É–±–ª–µ–π\n"

        if result_str == "":
            return "–ù–µ—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π –∑–∞ –¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏"
        return result_str

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}"


def employees_work():
    try:
        connection = get_db_connection()
        cursor = connection.cursor()
        query = """
            SELECT T.surname, T.article, T.product_name,
                   MIN(CASE WHEN T.receipt > 0 THEN T.date END) AS receipt_date,
                   MIN(CASE WHEN T.shipment > 0 THEN T.date END) AS shipment_date,
                   SUM(T.receipt) AS total_receipt,
                   SUM(T.shipment) AS total_shipment,
                   SUM((T.receipt - T.shipment) * P.price) AS total_money
            FROM Transactions T
            JOIN ProductsGuide P ON T.article = P.article
            GROUP BY T.surname, T.article, T.product_name
            ORDER BY T.surname
        """
        cursor.execute(query)
        rows = cursor.fetchall()
        connection.close()

        if not rows:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º"

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ñ–∞–º–∏–ª–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        employee_data = defaultdict(lambda: {"products": [], "total_money": 0})
        for row in rows:
            surname, article, product_name, receipt_date, shipment_date, total_receipt, total_shipment, total_money = row
            if surname is None:
                surname = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            employee_data[surname]["products"].append(
                (article, product_name, receipt_date, shipment_date, total_receipt, total_shipment)
            )
            employee_data[surname]["total_money"] += total_money if total_money is not None else 0

        result = ""
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        for surname, data in employee_data.items():
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∑–∞–ø–∏—Å–∏, –≥–¥–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–≥—Ä—É–∑–∫–∞
            filtered_products = [
                (article, prod, r_date, s_date, r, s)
                for article, prod, r_date, s_date, r, s in data["products"]
                if (r != 0 or s != 0)
            ]
            if not filtered_products:
                continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –µ—Å–ª–∏ –Ω–µ—Ç –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
            result += f"{surname}:\n"
            # –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
            result += "üü¢ –ü–æ—Å—Ç—É–ø–∏–ª–æ:\n"
            for article, product, receipt_date, _, receipt, _ in filtered_products:
                if receipt != 0:
                    date_str = receipt_date if receipt_date is not None else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                    result += f"    [{article}] - {product}: {int(receipt)} —à—Ç (–î–∞—Ç–∞: {date_str})\n"
            # –û—Ç–≥—Ä—É–∑–∫–∏
            result += "üî¥ –û—Ç–≥—Ä—É–∂–µ–Ω–æ:\n"
            for article, product, _, shipment_date, _, shipment in filtered_products:
                if shipment != 0:
                    date_str = shipment_date if shipment_date is not None else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                    result += f"    [{article}] - {product}: {int(shipment)} —à—Ç (–î–∞—Ç–∞: {date_str})\n"
            result += f"üí∞ –°—É–º–º–∞: {int(data['total_money'])} —Ä—É–±\n\n"

        if result == "":
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º —Å –Ω–µ–Ω—É–ª–µ–≤—ã–º–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è–º–∏/–æ—Ç–≥—Ä—É–∑–∫–∞–º–∏."
        return result

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}"


def get_product_name(connection, article):
    cursor = connection.cursor()
    cursor.execute("SELECT name FROM ProductsGuide WHERE article = ?", (article,))
    result = cursor.fetchone()
    return result[0] if result else "Unknown"



def insert_transaction(connection, article, product_name, receipt, shipment, comment, surname):
    cursor = connection.cursor()
    cursor.execute("""
        INSERT INTO Transactions (article, product_name, receipt, shipment, comment, surname)
        VALUES (?, ?, ?, ?, ?, ?)
    """, (article, product_name, receipt, shipment, comment, surname))
    connection.commit()




